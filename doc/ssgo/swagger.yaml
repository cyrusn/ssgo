swagger: '2.0'
info:
  title: API for `ssgo`
  description: Subject-Selection written in Golang
  version: "1.0.0"
# the domain of the service
host: localhost:5000
# array of all schemes that your API supports
schemes:
  - https
  - http
# will be prefixed to all paths
basePath: /api
securityDefinitions:
  SSGO_JWT:
    description: JWT schema used for access control
    type: apiKey
    in: header
    name: x-token
    scopes:
      student:
        - the user can update their priority
        - confirm their priority.
      teacher:
        - the user can view all students application status
        - can unconfirm student's priority before submission date.
      admin:
        - the user can unconfirm student's priority any time.
        - Get student rank and update subject capacity for allcation.
        - allocation process will be handle in client side.
consumes:
  - application/json
produces:
  - application/json
paths:
  /auth/login:
    post:
      summary: Generate JWT.
      description: Generate JWT given use's login credentials.
      parameters:
        - $ref: "#/parameters/Login"
      tags:
        - Auth
      responses:
        "200":
          description: JWT Send
          type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /auth/refresh:
    post:
      summary: Refresh JWT.
      security:
          - SSGO_JWT:
            - Student
            - Teacher
            - Admin
      description: Refresh JWT if existing JWT will expire in 5 minutes
      parameter:
        - name: token
          description: existing JWT in header
          in: header
          type: string
          required: true
      tags:
        - Auth
      responses:
        200:
          description: JWT Refreshed
          type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /user/{id}/info:
    get:
      summary: Get user info.
      security:
          - SSGO_JWT:
            - Student
            - Teacher
            - Admin
      parameters:
        - name: id
          description: User ID
          type: string
          in: path
      tags:
        - User
      responses:
        200:
          description: User info.
          schema:
            $ref: '#/definitions/UserInfo'
        401:
          description: Unauthorized. Invalid token.
        403:
          description: Access denied.
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /student/{id}/info:
    get:
      summary: Get student info.
      security:
          - SSGO_JWT:
            - Student
      parameters:
        - name: id
          description: student's id
          type: string
          in: path
      tags:
        - Student
      responses:
        200:
          description: Student's info.
          schema:
            $ref: '#/definitions/StudentInfo'
        401:
          description: Unauthorized. Invalid token.
        403:
          description: Access denied.
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /student/{id}/priority:
    post:
      summary: Students update his / her priority
      security:
          - SSGO_JWT:
            - Student
      parameters:
        - name: id
          description: user's login name
          in: path
          type: string
          required: true
        - name: priority
          description: subject priority is an array of integer, each element in array represents a code of subject combination.
          in: body
          schema:
            type: array
            items:
              type: integer
      tags:
        - Student
      responses:
        200:
          description: Update Success
          schema:
            $ref: '#/definitions/Success'
        401:
          description: Unauthorized. Invalid token.
        403:
          description: Access denied.
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /student/{id}/confirm:
    post:
      summary: Students confirm his / her priority
      security:
          - SSGO_JWT:
            - Student
      parameters:
        - name: id
          description: user's login name
          in: path
          type: string
          required: true
      tags:
        - Student
      responses:
        200:
          description: Update Success
          schema:
            $ref: '#/definitions/Success'
        401:
          description: Unauthorized. Invalid token.
        403:
          description: Access denied.
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /teacher/{id}/students:
    get:
      summary: Get the list of all students
      security:
          - SSGO_JWT:
            - Teacher
            - Admin
      parameters:
        - name: id
          description: user's login name
          in: path
          type: string
      tags:
        - Teacher
      responses:
        200:
          description: Update Success
          schema:
            $ref: '#/definitions/Students'
        401:
          description: Unauthorized. Invalid token.
        403:
          description: Access denied.
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /teacher/{id}/unconfirm/{student_id}:
    post:
      summary: Unconfirm student's priority
      security:
          - SSGO_JWT:
            - Teacher
            - Admin
      parameters:
        - name: id
          description: user's login name
          in: path
          type: string
        - name: student_id
          description:
          in: path
          type: string
      tags:
        - Teacher
      responses:
        200:
          description: Update Success
          schema:
            $ref: '#/definitions/Success'
        401:
          description: Unauthorized. Invalid token.
        403:
          description: Access denied.
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /admin/{id}/allocate/capacity:
    post:
      summary: Update subject capacity for all subjects for allocation
      security:
          - SSGO_JWT:
            - Admin
      parameters:
        - name: id
          description: user's login name
          in: path
          type: string
        - name: capacities
          description: capacities of each subject for allocation
          in: body
      tags:
        - Teacher
      responses:
        200:
          description: Update Success
          schema:
            $ref: '#/definitions/Success'
        401:
          description: Unauthorized. Invalid token.
        403:
          description: Access denied.
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /admin/{id}/allocate/result/{format}:
    get:
      produces:
        - application/json
        - text/csv
      summary: Get allocation result by given format.
      description: \
        When `format` is specified in path, request header is ignored
      parameters:
        - name: id
          description: user's login name
          in: path
          type: string
        - name: format
          description: return format send out
          in: path
          type: string
          enum:
            - json
            - csv
          default: json
      tags:
        - Teacher
      responses:
        200:
          description: return content with json / csv format
          schema:
            $ref: "#/definitions/Results"
        401:
          description: Unauthorized. Invalid token.
        403:
          description: Access denied.
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

definitions:
  Success:
    type: object
    required:
      - message
    properties:
      message:
        type: string
    example:
      {
        message: "Update success"
      }
  Error:
    type: object
    properties:
      message:
        type: string
    example:
      {
        message: "Unexpected error"
      }
  UserInfo:
    type: object
    required:
      - username
      - ename
      - cname
      - role
    properties:
      username:
        type: string
        description: user's login name
      ename:
        type: string
        description: user's english name
      cname:
        type: string
        description: user's chinese name
      role:
        type: string
        enum:
          - Student
          - Teacher
          - Admin
        description: user's role
    example:
      {
        username: "lpcyn",
        ename: "Ngan Chiu Yeung",
        cname: "顏昭洋",
        role: "Admin"
      }
  StudentInfo:
    type: object
    required:
      - class_code
      - class_no
      - priority
      - isConfirmed
    properties:
      class_code:
        type: string
        description: the class of student who is studying in
      class_no:
        type: integer
        description: class number of student in his / her class
      rank:
        type: integer
        description: student's rank for allocation
      priority:
        type: array
        items:
          type: integer
        description: subject priority is an array of integer, each element in array represents a code of subject combination.
      isConfirmed:
        type: boolean
        description: did student confired his / her subject priority
    example:
      {
        class_code: "3A",
        class_no: 3,
        rank: 12,
        priority: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34],
        isConfirmed: false,
      }
  Students:
    type: array
    items:
      schema:
        $ref: '#/definitions/StudentInfo'
  Result:
    type: object
    properties:
      username:
        type: string
      rank:
        type: integer
      elective_1:
        type: string
      elective_2:
        type: string
      priority:
        type: array
        items:
          type: integer
      priority_no:
        description: return subject combination code (integer in priorty array) of allocation
        type: integer
    example:
      {
        username: lp1313072,
        rank: 10,
        elective_1: "bio",
        elective_2: "chem",
        priority: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34],
        priority_no: 1
      }
  Results:
    type: array
    items:
      schema:
        $ref: '#/definitions/Result'

parameters:
  Login:
    name: login
    description: login information
    in: body
    required: true
    schema:
      type: object
      properties:
        username:
          type: string
          required: true
        password:
          type: string
          required: true
